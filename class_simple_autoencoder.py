{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"autoencoder_keras.py","provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"NrRm-e4T345s","colab_type":"code","colab":{}},"source":["from tensorflow.keras.layers import Dense, Input\n","from tensorflow.keras.models import Model\n","\n","class Autoencoder(object):\n","    \n","    def __init__(self, inout_dim, encoded_dim):    \n","        input_layer = Input(shape=(inout_dim,))\n","        hidden_input = Input(shape=(encoded_dim,))\n","        hidden_layer = Dense(encoded_dim, activation='relu')(input_layer)\n","        output_layer = Dense(784, activation='sigmoid')(hidden_layer)\n","        \n","        self._autoencoder_model = Model(input_layer, output_layer)\n","        self._encoder_model = Model(input_layer, hidden_layer)\n","        tmp_decoder_layer = self._autoencoder_model.layers[-1]\n","        self._decoder_model = Model(hidden_input, tmp_decoder_layer(hidden_input))\n","        \n","        self._autoencoder_model.compile(optimizer='adadelta', loss='binary_crossentropy')\n","        \n","    def train(self, input_train, input_test, batch_size, epochs):    \n","        self._autoencoder_model.fit(input_train, \n","                                    input_train,\n","                                    epochs = epochs,\n","                                    batch_size=batch_size,\n","                                    shuffle=True,\n","                                    validation_data=(\n","                                            input_test, \n","                                            input_test))\n","        \n","    def getEncodedImage(self, image):\n","        encoded_image = self._encoder_model.predict(image)\n","        return encoded_image\n","    \n","    def getDecodedImage(self, encoded_imgs):\n","        decoded_image = self._decoder_model.predict(encoded_imgs)\n","        return decoded_image"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Z41dwgxhemNy","colab_type":"code","colab":{}},"source":["import numpy as np\n","from tensorflow.keras.datasets import fashion_mnist\n","#from autoencoder_keras import Autoencoder\n","import matplotlib.pyplot as plt\n","import os \n","os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2' \n","\n","# Import data\n","(x_train, _), (x_test, _) = fashion_mnist.load_data()\n","\n","# Prepare input\n","x_train = x_train.astype('float32') / 255.\n","x_test = x_test.astype('float32') / 255.\n","x_train = x_train.reshape((len(x_train), np.prod(x_train.shape[1:])))\n","x_test = x_test.reshape((len(x_test), np.prod(x_test.shape[1:])))\n","\n","# Keras implementation\n","autoencoder = Autoencoder(x_train.shape[1], 32)\n","autoencoder.train(x_train, x_test, 256, 50)\n","encoded_imgs = autoencoder.getEncodedImage(x_test)\n","decoded_imgs = autoencoder.getDecodedImage(encoded_imgs)\n","\n","# Keras implementation results\n","plt.figure(figsize=(20, 4))\n","for i in range(10):\n","    # Original\n","    subplot = plt.subplot(2, 10, i + 1)\n","    plt.imshow(x_test[i].reshape(28, 28))\n","    plt.gray()\n","    subplot.get_xaxis().set_visible(False)\n","    subplot.get_yaxis().set_visible(False)\n","\n","    # Reconstruction\n","    subplot = plt.subplot(2, 10, i + 11)\n","    plt.imshow(decoded_imgs[i].reshape(28, 28))\n","    plt.gray()\n","    subplot.get_xaxis().set_visible(False)\n","    subplot.get_yaxis().set_visible(False)\n","plt.show()"],"execution_count":0,"outputs":[]}]}